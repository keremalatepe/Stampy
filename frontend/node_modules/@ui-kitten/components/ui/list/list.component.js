/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { FlatList, StyleSheet, } from 'react-native';
import { styled, } from '../../theme';
/**
 * `List` component is a performant interface for rendering simple, flat lists. Extends `FlatList`. Renders list of
 * `ListItem` components or custom content.
 *
 * @extends React.Component
 *
 * @property {(info: ListRenderItemInfo<ItemT>, style: StyleType) => ReactElement} renderItem - Takes an
 * item from data and renders it into the list.
 *
 * @property {FlatListProps} ...FlatListProps - Any props applied to FlatList component.
 *
 * @overview-example ListSimpleUsage
 *
 * @overview-example ListCompositeItem
 *
 * @example ListInlineStyling
 * ```
 */
export class ListComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.listRef = React.createRef();
        this.scrollToEnd = (params) => {
            this.listRef.current.scrollToEnd(params);
        };
        this.scrollToIndex = (params) => {
            this.listRef.current.scrollToIndex(params);
        };
        this.getComponentStyle = (source) => {
            return {
                container: source,
                item: {},
            };
        };
        this.getItemStyle = (source, index) => {
            const { item } = source;
            return item;
        };
        this.keyExtractor = (item, index) => {
            return index.toString();
        };
        this.renderItem = (info) => {
            const itemStyle = this.getItemStyle(this.props.themedStyle, info.index);
            const itemElement = this.props.renderItem(info, itemStyle);
            return React.cloneElement(itemElement, {
                style: [itemStyle, styles.item, itemElement.props.style],
                index: info.index,
            });
        };
    }
    scrollToOffset(params) {
        this.listRef.current.scrollToOffset(params);
    }
    render() {
        const _a = this.props, { style, themedStyle } = _a, derivedProps = __rest(_a, ["style", "themedStyle"]);
        const componentStyle = this.getComponentStyle(themedStyle);
        return (<FlatList keyExtractor={this.keyExtractor} {...derivedProps} ref={this.listRef} style={[componentStyle.container, styles.container, style]} renderItem={this.renderItem}/>);
    }
}
ListComponent.styledComponentName = 'List';
const styles = StyleSheet.create({
    container: {},
    item: {},
});
export const List = styled(ListComponent);
//# sourceMappingURL=list.component.js.map