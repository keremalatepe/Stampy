/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { TabBar } from './tabBar.component';
import { ViewPager } from '../viewPager/viewPager.component';
class TabViewChildElement {
}
class TabViewChildren {
    constructor() {
        this.tabs = [];
        this.content = [];
    }
}
/**
 * `TabView` is a dynamic tabset component. Allows flipping through the tab "pages".
 *
 * @extends React.Component
 **
 * @property {number} selectedIndex - Determines current tab index.
 *
 * @property {StyleProp<ViewStyle>} tabBarStyle - Determines style TabBar component.
 *
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines style of selected tab indicator.
 *
 * @property {(index: number) => void} onSelect - Fires on "page" select with corresponding index.
 *
 * @property {ReactElement<TabProps> | ReactElement<TabProps>[]} children - Determines children of the component.
 *
 * @property {(index: number) => boolean} shouldLoadComponent - Determines loading behavior particular page and can be
 * used for lazy loading.
 *
 * @property {(offset: number) => void} onOffsetChange - Fires on scroll event with current scroll offset.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example TabViewSimpleUsage
 *
 * @overview-example TabViewWithIcon
 *
 * @overview-example TabViewLazyLoading
 *
 * @example TabViewInlineStyling
 */
export class TabView extends React.Component {
    constructor() {
        super(...arguments);
        this.viewPagerRef = React.createRef();
        this.tabBarRef = React.createRef();
        this.onBarSelect = (index) => {
            const { current: viewPager } = this.viewPagerRef;
            viewPager.scrollToIndex({ index, animated: true });
        };
        this.onPagerOffsetChange = (offset) => {
            const { current: tabBar } = this.tabBarRef;
            const tabCount = React.Children.count(tabBar.props.children);
            tabBar.scrollToOffset({ offset: offset / tabCount });
        };
        this.onPagerSelect = (selectedIndex) => {
            if (this.props.onSelect) {
                this.props.onSelect(selectedIndex);
            }
        };
        this.renderComponentChild = (element, index) => {
            return {
                tab: React.cloneElement(element, { key: index }),
                content: element.props.children,
            };
        };
        this.renderComponentChildren = (source) => {
            return React.Children.toArray(source).reduce((acc, element, index) => {
                const { tab, content } = this.renderComponentChild(element, index);
                return {
                    tabs: [...acc.tabs, tab],
                    content: [...acc.content, content],
                };
            }, new TabViewChildren());
        };
    }
    render() {
        const _a = this.props, { style, selectedIndex, children, tabBarStyle, indicatorStyle } = _a, derivedProps = __rest(_a, ["style", "selectedIndex", "children", "tabBarStyle", "indicatorStyle"]);
        const { tabs, content } = this.renderComponentChildren(children);
        return (<View style={[styles.container, style]} {...derivedProps}>
        <TabBar style={tabBarStyle} ref={this.tabBarRef} selectedIndex={selectedIndex} indicatorStyle={indicatorStyle} onSelect={this.onBarSelect}>
          {tabs}
        </TabBar>
        <ViewPager ref={this.viewPagerRef} {...derivedProps} style={[styles.container, style]} selectedIndex={selectedIndex} shouldLoadComponent={this.props.shouldLoadComponent} onOffsetChange={this.onPagerOffsetChange} onSelect={this.onPagerSelect}>
          {content}
        </ViewPager>
      </View>);
    }
}
TabView.defaultProps = {
    selectedIndex: 0,
};
const styles = StyleSheet.create({
    container: {
        overflow: 'hidden',
    },
});
//# sourceMappingURL=tabView.component.js.map