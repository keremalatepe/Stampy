/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, TouchableOpacity, View, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { CheckBox } from '../checkbox/checkbox.component';
class SelectOptionComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onPress = (event) => {
            this.props.dispatch([]);
            this.props.onPress(this.props.item, event);
        };
        this.onMultiSelectItemPress = (value) => {
            this.onPress(null);
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(this.props.item, event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(this.props.item, event);
            }
        };
        this.onLongPress = (event) => {
            if (this.props.onLongPress) {
                this.props.onLongPress(this.props.item, event);
            }
        };
        this.getComponentStyle = (source) => {
            const { textColor, textFontFamily, textFontSize, textFontWeight, textLineHeight, textMarginHorizontal } = source, containerStyles = __rest(source, ["textColor", "textFontFamily", "textFontSize", "textFontWeight", "textLineHeight", "textMarginHorizontal"]);
            return {
                container: containerStyles,
                text: {
                    color: textColor,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    fontWeight: textFontWeight,
                    lineHeight: textLineHeight,
                    marginHorizontal: textMarginHorizontal,
                },
            };
        };
        this.renderTextElement = (style) => {
            return (<Text style={[style, styles.text, this.props.item.textStyle]}>
        {this.props.item.text}
      </Text>);
        };
        this.renderDefaultItem = () => {
            const _a = this.props, { themedStyle, style, item } = _a, restProps = __rest(_a, ["themedStyle", "style", "item"]);
            const { container, text } = this.getComponentStyle(themedStyle);
            const textElement = this.renderTextElement(text);
            return (<TouchableOpacity activeOpacity={1.0} {...restProps} style={[styles.container, container, style]} onPress={this.onPress} onPressIn={this.onPressIn} onPressOut={this.onPressOut} onLongPress={this.onLongPress}>
        {textElement}
      </TouchableOpacity>);
        };
        this.renderMultiSelectItem = () => {
            const _a = this.props, { style, themedStyle, selected, disabled, indeterminate, item } = _a, restProps = __rest(_a, ["style", "themedStyle", "selected", "disabled", "indeterminate", "item"]);
            const { container, text } = this.getComponentStyle(themedStyle);
            return (<View {...restProps} style={[styles.container, container, style]}>
        <CheckBox text={item.text} textStyle={[text, item.textStyle, styles.multiSelectText]} disabled={disabled} checked={selected} indeterminate={indeterminate} onChange={this.onMultiSelectItemPress}/>
      </View>);
        };
    }
    render() {
        return this.props.multi ? this.renderMultiSelectItem() : this.renderDefaultItem();
    }
}
SelectOptionComponent.styledComponentName = 'SelectOption';
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    icon: {},
    text: {},
    multiSelectText: {
        width: '100%',
    },
});
export const SelectOption = styled(SelectOptionComponent);
//# sourceMappingURL=selectOption.component.js.map