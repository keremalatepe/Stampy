/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Animated, StyleSheet, TouchableOpacity, View, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { Popover } from '../popover/popover.component';
import { SelectOptionsList, } from './selectOptionsList.component';
import { MeasureNode, } from '../popover/measure.component';
import { MultiSelectStrategy, SingleSelectStrategy, } from './selection.strategy';
import { allWithPrefix, isValidString, } from '../support/services';
import { ChevronDown, } from '../support/components/chevronDown.component';
const MEASURED_CONTROL_TAG = 'Control';
/**
 * Styled `Select` component. By default, the MultiSelect compares the items by reference.
 * To specify a field from the data object which will be used for the comparison,
 * implement the `keyExtractor` property.
 *
 * @extends React.Component
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `small`, `medium` or `large`.
 * Default is `medium`.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false.
 *
 * @property {boolean} multiSelect - Determines `multi-select` behavior of the Select component.
 *
 * @property {SelectOption} selectedOption - Determines selected option of the Select.
 * Can be `SelectOptionType` or `SelectOptionType[]` It depends on `multiSelect` property.
 *
 * @property {SelectOptionType[]} data - Determines items of the Select component.
 *
 * @property {(option: SelectOption, event?: GestureResponderEvent) => void} onSelect - Fires on option selection.
 * Returns selected option/options.
 *
 * @property {StyleProp<TextStyle>} label - Determines the `label` of the component.
 *
 * @property {StyleProp<TextStyle>} placeholder - Determines the `placeholder` of the component.
 * By default is `Select Option`.
 *
 * @property {StyleProp<TextStyle>} labelStyle - Determines the style of the `label`.
 *
 * @property {StyleProp<TextStyle>} placeholderStyle - Determines the style of the `placeholder`.
 *
 * @property {StyleProp<TextStyle>} textStyle - Determines the style of the selected option/options text.
 *
 * @property {StyleProp<ViewStyle>} controlStyle - Determines the style of `control`.
 *
 * @property {(style: StyleType) => ReactElement} icon - Determines icon of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {KeyExtractorType} keyExtractor - Used to extract a unique key for a given item;
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example SelectSimpleUsage
 *
 * @overview-example SelectStates
 *
 * @overview-example SelectStatus
 *
 * @overview-example SelectSize
 *
 * @overview-example SelectMultiSelect
 *
 * @overview-example SelectWithGroups
 *
 * @overview-example SelectDisabledOptions
 *
 * @example SelectInitialValue
 *
 * @example SelectMultiInitialValue
 *
 * @example SelectCustomIcon
 *
 * @example SelectInlineStyling
 */
class SelectComponent extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            visible: false,
            optionsListWidth: 0,
        };
        this.onPress = (event) => {
            this.setVisibility();
            if (this.props.onPress) {
                this.props.onPress(event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.onItemSelect = (option, event) => {
            const selectedOption = this.strategy.select(option, this.setVisibility);
            this.props.onSelect(selectedOption);
        };
        this.onControlMeasure = (result) => {
            const width = result[MEASURED_CONTROL_TAG].size.width;
            this.setState({ optionsListWidth: width });
        };
        this.createSelectionStrategy = () => {
            const { multiSelect, selectedOption, keyExtractor, data } = this.props;
            return multiSelect ?
                new MultiSelectStrategy(selectedOption, data, keyExtractor) :
                new SingleSelectStrategy(selectedOption, data, keyExtractor);
        };
        this.setVisibility = () => {
            const visible = !this.state.visible;
            this.setState({ visible }, this.handleVisibleChange);
        };
        this.handleVisibleChange = () => {
            this.dispatchActive();
            this.startIconAnimation();
        };
        this.dispatchActive = () => {
            const { visible } = this.state;
            if (visible) {
                this.props.dispatch([Interaction.ACTIVE]);
            }
            else {
                this.props.dispatch([]);
            }
        };
        this.startIconAnimation = () => {
            const { visible } = this.state;
            if (visible) {
                this.animateIcon(-180);
            }
            else {
                this.animateIcon(0);
            }
        };
        this.animateIcon = (toValue) => {
            Animated.timing(this.iconAnimation, {
                toValue: toValue,
                duration: 200,
            }).start();
        };
        this.getComponentStyle = (source) => {
            const { backgroundColor, borderColor, borderWidth, minHeight, minWidth, paddingHorizontal, paddingVertical, borderRadius, } = source;
            const iconStyles = allWithPrefix(source, 'icon');
            const textStyles = allWithPrefix(source, 'text');
            const placeholderStyles = allWithPrefix(source, 'placeholder');
            const optionsListStyles = allWithPrefix(source, 'optionsList');
            const labelStyle = allWithPrefix(source, 'label');
            return {
                control: {
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    borderWidth: borderWidth,
                    minHeight: minHeight,
                    minWidth: minWidth,
                    paddingHorizontal: paddingHorizontal,
                    paddingVertical: paddingVertical,
                    borderRadius: borderRadius,
                },
                icon: {
                    height: iconStyles.iconHeight,
                    width: iconStyles.iconWidth,
                    marginHorizontal: iconStyles.iconMarginHorizontal,
                    tintColor: iconStyles.iconTintColor,
                },
                text: {
                    marginHorizontal: textStyles.textMarginHorizontal,
                    color: textStyles.textColor,
                    fontSize: textStyles.textFontSize,
                    fontWeight: textStyles.textFontWeight,
                    lineHeight: textStyles.textLineHeight,
                    fontFamily: textStyles.textFontFamily,
                },
                placeholder: {
                    marginHorizontal: placeholderStyles.placeholderMarginHorizontal,
                    color: placeholderStyles.placeholderColor,
                    fontSize: placeholderStyles.placeholderFontSize,
                    fontWeight: placeholderStyles.placeholderFontWeight,
                    lineHeight: placeholderStyles.placeholderLineHeight,
                    fontFamily: placeholderStyles.placeholderFontFamily,
                },
                optionsList: {
                    maxHeight: optionsListStyles.optionsListMaxHeight,
                    borderRadius: optionsListStyles.optionsListBorderRadius,
                    borderColor: optionsListStyles.optionsListBorderColor,
                    borderWidth: optionsListStyles.optionsListBorderWidth,
                },
                label: {
                    marginBottom: labelStyle.labelMarginBottom,
                    color: labelStyle.labelColor,
                    fontSize: labelStyle.labelFontSize,
                    fontWeight: labelStyle.labelFontWeight,
                    lineHeight: labelStyle.labelLineHeight,
                    fontFamily: labelStyle.labelFontFamily,
                },
            };
        };
        this.renderLabelElement = (style) => {
            const { label, labelStyle } = this.props;
            return (<Text style={[style, styles.label, labelStyle]}>
        {label}
      </Text>);
        };
        this.renderDefaultIconElement = (style) => {
            const rotateInterpolate = this.iconAnimation.interpolate({
                inputRange: [-180, 0],
                outputRange: ['-180deg', '0deg'],
            });
            const animatedStyle = { transform: [{ rotate: rotateInterpolate }] };
            const { tintColor } = style, svgStyle = __rest(style, ["tintColor"]);
            return (<Animated.View style={animatedStyle}>
        <ChevronDown fill={tintColor} {...svgStyle}/>
      </Animated.View>);
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style, this.state.visible);
            return React.cloneElement(iconElement, {
                style: [style, styles.icon, iconElement.props.style],
            });
        };
        this.renderTextElement = (valueStyle, placeholderStyle) => {
            const { placeholder, textStyle } = this.props;
            const value = this.strategy.getPlaceholder(placeholder);
            const style = placeholder === value ? placeholderStyle : valueStyle;
            return (<Text style={[style, styles.text, textStyle]} numberOfLines={1} ellipsizeMode='tail'>
        {value}
      </Text>);
        };
        this.renderOptionsListElement = (style) => {
            const _a = this.props, { appearance, selectedOption } = _a, restProps = __rest(_a, ["appearance", "selectedOption"]);
            const additionalOptionsListStyle = { width: this.state.optionsListWidth };
            return (<SelectOptionsList {...restProps} strategy={this.strategy} key={0} style={[styles.optionsList, style, additionalOptionsListStyle]} bounces={false} onSelect={this.onItemSelect}/>);
        };
        this.renderControlChildren = (style) => {
            const iconElement = this.props.icon && this.renderIconElement(style.icon);
            return [
                iconElement || this.renderDefaultIconElement(style.icon),
                this.renderTextElement(style.text, style.placeholder),
            ];
        };
        this.renderControlElement = () => {
            const _a = this.props, { themedStyle, controlStyle } = _a, restProps = __rest(_a, ["themedStyle", "controlStyle"]);
            const _b = this.getComponentStyle(themedStyle), { control } = _b, childrenStyles = __rest(_b, ["control"]);
            const [iconElement, textElement] = this.renderControlChildren(childrenStyles);
            const measuringProps = { tag: MEASURED_CONTROL_TAG };
            return (<MeasureNode onResult={this.onControlMeasure}>
        <TouchableOpacity {...restProps} {...measuringProps} key={MEASURED_CONTROL_TAG} activeOpacity={1.0} style={[styles.control, control, controlStyle]} onPress={this.onPress} onPressIn={this.onPressIn} onPressOut={this.onPressOut}>
          {textElement}
          {iconElement}
        </TouchableOpacity>
      </MeasureNode>);
        };
        this.renderComponentChildren = (style) => {
            return [
                this.renderOptionsListElement(style.optionsList),
                isValidString(this.props.label) && this.renderLabelElement(style.label),
                this.renderControlElement(),
            ];
        };
        this.strategy = this.createSelectionStrategy();
        this.iconAnimation = new Animated.Value(0);
    }
    componentDidUpdate() {
        this.strategy = this.createSelectionStrategy();
    }
    render() {
        const { themedStyle, style } = this.props;
        const componentStyle = this.getComponentStyle(themedStyle);
        const additionalOptionsListStyle = { maxWidth: this.state.optionsListWidth };
        const [optionsListElement, labelElement, controlElement] = this.renderComponentChildren(componentStyle);
        return (<View style={style}>
        {labelElement}
        <Popover visible={this.state.visible} content={optionsListElement} style={additionalOptionsListStyle} indicatorStyle={styles.indicator} onBackdropPress={this.setVisibility}>
          {controlElement}
        </Popover>
      </View>);
    }
}
SelectComponent.styledComponentName = 'Select';
SelectComponent.defaultProps = {
    placeholder: 'Select Option',
    multiSelect: false,
};
const styles = StyleSheet.create({
    control: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    text: {
        flex: 1,
    },
    icon: {},
    label: {},
    indicator: {
        width: 0,
        height: 6,
    },
    optionsList: {
        flexGrow: 0,
    },
});
export const Select = styled(SelectComponent);
//# sourceMappingURL=select.component.js.map