import { SelectOptionType } from './selectOption.component';
import { KeyExtractorType } from './select.component';
export declare abstract class SelectionStrategy<S> {
    selectedOption: S;
    protected keyExtractor: KeyExtractorType;
    protected constructor(options: S, data: SelectOptionType[], keyExtractor?: KeyExtractorType);
    abstract isSelected(item: SelectOptionType): boolean;
    abstract select(option: SelectOptionType, callback?: () => void): S;
    abstract getPlaceholder(placeholder: string): string;
    protected abstract verifyData(data: SelectOptionType[]): void;
    protected compareOptions(option1: SelectOptionType, option2: SelectOptionType): boolean;
    protected hasOptionSubItems(option: SelectOptionType): boolean;
    protected processData(data: SelectOptionType[]): string[];
}
export declare class MultiSelectStrategy extends SelectionStrategy<SelectOptionType[]> {
    constructor(options: SelectOptionType | SelectOptionType[], data: SelectOptionType[], keyExtractor?: KeyExtractorType);
    select(option: SelectOptionType, callback?: () => void): SelectOptionType[];
    private selectDefaultOption;
    private selectOptionWithSubOptions;
    getPlaceholder(placeholder: string): string;
    isSelected(item: SelectOptionType): boolean;
    private isSelectedOptionExist;
    private removeOption;
    protected verifyData(data: SelectOptionType[]): void;
}
export declare class SingleSelectStrategy extends SelectionStrategy<SelectOptionType> {
    constructor(options: SelectOptionType | SelectOptionType[], data: SelectOptionType[], keyExtractor?: KeyExtractorType);
    select(option: SelectOptionType, callback?: () => void): SelectOptionType;
    getPlaceholder(placeholder: string): string;
    isSelected(item: SelectOptionType): boolean;
    protected verifyData(data: SelectOptionType[]): void;
}
