var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { styled, } from '../../theme';
import { Menu, } from '../menu/menu.component';
/**
 * Styled `Navigation Drawer` component. The principle of rendering a `Drawer` is the same as a rendering a List.
 *
 * @extends React.Component
 *
 * @property {MenuItemType[]} data - Determines the items displayed in drawer menu.
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `default` or `noDivider`.
 * Default is `default`.
 *
 * @property {() => ReactElement} header - Determines the function to render a header. Optional.
 *
 * @property {() => ReactElement} footer - Determines the function to render a footer. Optional.
 *
 * @property {(index: number, event: GestureResponderEvent) => void} onSelect - Determines the function to handle
 * menu item press.
 *
 * @property {MenuProps} ...MenuProps - Any props applied to Menu component.
 *
 * @overview-example DrawerSimpleUsage
 *
 * @overview-example Using with React Navigation
 *
 * ```
 * import React from 'react';
 * import { createAppContainer, SafeAreaView } from 'react-navigation';
 * import { createDrawerNavigator } from 'react-navigation-drawer';
 * import { Drawer, Layout, Text } from '../..';
 *
 * // React Navigation also requires installing additional dependencies:
 * //
 * // npm i react-navigation react-navigation-drawer react-native-reanimated react-native-gesture-handler
 * //
 * // Then, install it for ios:
 * //
 * // cd ./ios && pod install
 *
 * const HomeScreen = () => (
 *   <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
 *     <Text category='h1'>HOME</Text>
 *   </Layout>
 * );
 *
 * const SettingsScreen = () => (
 *   <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
 *     <Text category='h1'>SETTINGS</Text>
 *   </Layout>
 * );
 *
 * const DrawerComponent = ({ navigation }) => {
 *
 *   const onSelect = (index) => {
 *     const { [index]: selectedTabRoute } = navigation.state.routes;
 *     navigation.navigate(selectedTabRoute.routeName);
 *   };
 *
 *   return (
 *     <SafeAreaView>
 *       <Drawer data={[{ title: 'Home' }, { title: 'Settings' }]} onSelect={onSelect} />
 *     </SafeAreaView>
 *   );
 * };
 *
 * const DrawerNavigator = createDrawerNavigator({
 *   Home: HomeScreen,
 *   Settings: SettingsScreen,
 * }, {
 *   contentComponent: DrawerComponent,
 * });
 *
 * export const AppNavigator = createAppContainer(DrawerNavigator);
 * ```
 *
 * @overview-example DrawerWithIcons
 *
 * @overview-example DrawerHeader
 *
 * @overview-example DrawerFooter
 *
 * @example DrawerCustomHeader
 *
 * @example DrawerNotificationBadgeItem
 */
class DrawerComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.renderHeader = () => {
            return this.props.header();
        };
        this.renderFooter = () => {
            return this.props.footer();
        };
        this.renderMenu = () => {
            const _a = this.props, { style, header, footer, themedStyle } = _a, restProps = __rest(_a, ["style", "header", "footer", "themedStyle"]);
            return (<Menu style={themedStyle} showsVerticalScrollIndicator={false} bounces={false} {...restProps}/>);
        };
        this.renderComponentChildren = () => {
            const { header, footer } = this.props;
            return [
                header && this.renderHeader(),
                this.renderMenu(),
                footer && this.renderFooter(),
            ];
        };
    }
    render() {
        const [header, menu, footer] = this.renderComponentChildren();
        return (<React.Fragment>
        {header}
        {menu}
        {footer}
      </React.Fragment>);
    }
}
DrawerComponent.styledComponentName = 'Drawer';
export const Drawer = styled(DrawerComponent);
//# sourceMappingURL=drawer.component.js.map