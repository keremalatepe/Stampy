var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Animated, } from 'react-native';
import { getIconAnimation, } from './iconAnimation';
import { IconRegistryService, } from './service/iconRegistry.service';
/**
 * `Icon` component with animation support. Allows to render any ReactElement registered for a specific name.
 * Starting from UI Kitten 4.2, there is `@ui-kitten/eva-icons` module
 * that renders any icon from eva-icons package in `svg` format.
 * It allows easily use icons in any component that has `icon` prop
 *
 * @extends React.Component
 *
 * @method {(callback?: Animated.EndCallback) => void} startAnimation - Toggle animation to start.
 *
 * @method {() => void} stopAnimation - Toggle animation to stop.
 *
 * @property {string} name - Name of registered icon.
 *
 * @property {string} pack - Name of icon pack that is able to provide an icon for specified name.
 *
 * @property {string} animation - Animation name. Available `zoom`, `pulse` and `shake`. Default is `zoom`.
 *
 * @property {AnimationConfig} animationConfig - Determines animation config. Extends `Animated.AnimationConfig`.
 *
 * @overview-example IconSimpleUsage
 *
 * @overview-example IconWithinButton
 *
 * @overview-example IconWithinInput
 *
 * @overview-example IconExternalSource
 *
 * @overview-example IconAnimation
 *
 * @example IconAnimationInfinite
 *
 * @example IconInlineStyling
 */
export class Icon extends React.Component {
    constructor(props) {
        super(props);
        this.startAnimation = (callback) => {
            this.animation.start(callback);
        };
        this.stopAnimation = () => {
            this.animation.stop();
        };
        this.getComponentStyle = () => {
            return this.animation.toProps();
        };
        this.animation = getIconAnimation(props.animation, props.animationConfig);
    }
    componentWillUnmount() {
        this.animation.release();
    }
    render() {
        const _a = this.props, { name, pack } = _a, restProps = __rest(_a, ["name", "pack"]);
        const registeredIcon = IconRegistryService.getIcon(name, pack);
        return (<Animated.View {...this.getComponentStyle()}>
        {registeredIcon.icon.toReactElement(restProps)}
      </Animated.View>);
    }
}
Icon.defaultProps = {
    animation: 'zoom',
};
//# sourceMappingURL=icon.component.js.map