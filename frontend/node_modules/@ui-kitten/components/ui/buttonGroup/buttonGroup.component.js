/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
/**
 * Renders a group of `Buttons`.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `filled` or `outline`.
 * Default is `filled`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `primary`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `tiny`, `small`, `medium`, `large`, or `giant`.
 * Default is `medium`.
 *
 * @property {{ReactElement<ButtonProps> | ReactElement<ButtonProps>[]} children - Determines buttons in group.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example ButtonGroupSimpleUsage
 *
 * @overview-example ButtonGroupAppearance
 *
 * @overview-example ButtonGroupStatus
 *
 * @overview-example ButtonGroupSize
 *
 * @overview-example ButtonGroupOutline
 *
 * @overview-example ButtonGroupWithIcons
 *
 * @example ButtonGroupInlineStyling
 */
class ButtonGroupComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.getComponentStyle = (source) => {
            const { dividerBackgroundColor, dividerWidth } = source, containerParameters = __rest(source, ["dividerBackgroundColor", "dividerWidth"]);
            return {
                container: Object.assign(Object.assign({}, containerParameters), { borderWidth: containerParameters.borderWidth + 0.25 }),
                button: {
                    borderWidth: dividerWidth,
                    borderColor: dividerBackgroundColor,
                },
            };
        };
        this.isFirstElement = (index) => {
            return index === 0;
        };
        this.isLastElement = (index) => {
            return index === React.Children.count(this.props.children) - 1;
        };
        this.renderButtonElement = (element, index, style) => {
            const { appearance, size, status } = this.props;
            const { borderRadius } = style.container;
            const { borderWidth, borderColor } = style.button;
            const shapeStyle = !this.isLastElement(index) && {
                borderEndWidth: borderWidth,
                borderEndColor: borderColor,
            };
            const startShapeStyle = this.isFirstElement(index) && {
                borderTopStartRadius: borderRadius,
                borderBottomStartRadius: borderRadius,
            };
            const endShapeStyle = this.isLastElement(index) && {
                borderTopEndRadius: borderRadius,
                borderBottomEndRadius: borderRadius,
            };
            return React.cloneElement(element, {
                key: index,
                appearance: appearance,
                size: size,
                status: status,
                style: [element.props.style, styles.button, shapeStyle, startShapeStyle, endShapeStyle],
            });
        };
        this.renderButtonElements = (source, style) => {
            return React.Children.map(source, (element, index) => {
                return this.renderButtonElement(element, index, style);
            });
        };
    }
    render() {
        const _a = this.props, { themedStyle, style, children } = _a, derivedProps = __rest(_a, ["themedStyle", "style", "children"]);
        const componentStyle = this.getComponentStyle(themedStyle);
        const buttonElements = this.renderButtonElements(children, componentStyle);
        return (<View {...derivedProps} style={[componentStyle.container, styles.container, style]}>
        {buttonElements}
      </View>);
    }
}
ButtonGroupComponent.styledComponentName = 'ButtonGroup';
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        overflow: 'hidden',
    },
    button: {
        borderRadius: 0,
        borderWidth: 0,
    },
});
export const ButtonGroup = styled(ButtonGroupComponent);
//# sourceMappingURL=buttonGroup.component.js.map