/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
import { TabIndicator, } from '../support/components/tabIndicator.component';
/**
 * `BottomNavigation` component is designed to be a Bottom Tab Bar.
 * Can be used for navigation.
 *
 * @extends React.Component
 *
 * @property {number} selectedIndex - Determines index of the selected tab.
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `default` or `noIndicator`.
 *
 * @property {ReactElement<TabProps> | ReactElement<TabProps>[]} children - Determines tabs of the Bottom Navigation.
 *
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines styles of the indicator.
 *
 * @property {(index: number) => void} onSelect - Triggered on select value.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example BottomNavigationSimpleUsage
 *
 * @overview-example Using with React Navigation
 *
 * ```
 * import React from 'react';
 * import { createAppContainer, SafeAreaView } from 'react-navigation';
 * import { createBottomTabNavigator } from 'react-navigation-tabs';
 * import { BottomNavigation, BottomNavigationTab, Layout, Text } from '../..';
 *
 * // React Navigation also requires installing additional dependencies:
 * //
 * // npm i react-navigation react-navigation-tabs react-native-reanimated react-native-gesture-handler
 * //
 * // Then install it for ios:
 * //
 * // cd ios && pod install
 *
 * const UsersScreen = () => (
 *   <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
 *     <Text category='h1'>USERS</Text>
 *   </Layout>
 * );
 *
 * const OrdersScreen = () => (
 *   <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
 *     <Text category='h1'>ORDERS</Text>
 *   </Layout>
 * );
 *
 * const TabBarComponent = ({ navigation }) => {
 *
 *   const onSelect = (index) => {
 *     const selectedTabRoute = navigation.state.routes[index];
 *     navigation.navigate(selectedTabRoute.routeName);
 *   };
 *
 *   return (
 *     <SafeAreaView>
 *       <BottomNavigation selectedIndex={navigation.state.index} onSelect={onSelect}>
 *         <BottomNavigationTab title='USERS'/>
 *         <BottomNavigationTab title='ORDERS'/>
 *       </BottomNavigation>
 *     </SafeAreaView>
 *   );
 * };
 *
 * const TabNavigator = createBottomTabNavigator({
 *   Users: UsersScreen,
 *   Orders: OrdersScreen,
 * }, {
 *   tabBarComponent: TabBarComponent,
 * });
 *
 * export const AppNavigator = createAppContainer(TabNavigator);
 * ```
 *
 * @example BottomNavigationWithoutIndicator
 *
 * @overview-example BottomNavigationWithIcons
 *
 * @example BottomNavigationInlineStyling
 */
export class BottomNavigationComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onTabSelect = (index) => {
            if (this.props.onSelect && this.props.selectedIndex !== index) {
                this.props.onSelect(index);
            }
        };
        this.getComponentStyle = (source) => {
            const { indicatorHeight, indicatorBackgroundColor } = source, containerParameters = __rest(source, ["indicatorHeight", "indicatorBackgroundColor"]);
            return {
                container: containerParameters,
                item: {},
                indicator: {
                    height: indicatorHeight,
                    backgroundColor: indicatorBackgroundColor,
                },
            };
        };
        this.renderIndicatorElement = (positions, style) => {
            const { indicatorStyle, selectedIndex } = this.props;
            return (<TabIndicator key={0} style={[style, styles.indicator, indicatorStyle]} selectedPosition={selectedIndex} positions={positions}/>);
        };
        this.renderTabElement = (element, index) => {
            return React.cloneElement(element, {
                key: index,
                style: [styles.item, element.props.style],
                selected: index === this.props.selectedIndex,
                onSelect: () => this.onTabSelect(index),
            });
        };
        this.renderTabElements = (source) => {
            return React.Children.map(source, this.renderTabElement);
        };
        this.renderComponentChildren = (style) => {
            const tabElements = this.renderTabElements(this.props.children);
            const hasIndicator = style.indicator.height > 0;
            return [
                hasIndicator && this.renderIndicatorElement(tabElements.length, style.indicator),
                ...tabElements,
            ];
        };
    }
    render() {
        const _a = this.props, { themedStyle, style } = _a, derivedProps = __rest(_a, ["themedStyle", "style"]);
        const _b = this.getComponentStyle(themedStyle), { container } = _b, componentStyles = __rest(_b, ["container"]);
        const [indicatorElement, ...tabElements] = this.renderComponentChildren(componentStyles);
        return (<View {...derivedProps} style={[container, styles.container, style]}>
        {indicatorElement}
        {tabElements}
      </View>);
    }
}
BottomNavigationComponent.styledComponentName = 'BottomNavigation';
BottomNavigationComponent.defaultProps = {
    selectedIndex: 0,
};
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
    },
    item: {
        flex: 1,
    },
    indicator: {
        position: 'absolute',
    },
});
export const BottomNavigation = styled(BottomNavigationComponent);
//# sourceMappingURL=bottomNavigation.component.js.map