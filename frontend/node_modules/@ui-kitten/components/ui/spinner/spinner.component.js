import React from 'react';
import { Animated, StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
import { SpinnerAnimation, } from './animation';
// TODO: Frame, Point, Size types should be refactored to common types
import { Size } from '../popover/type';
/**
 * Styled `Spinner` component. Designed to be used as `ActivityIndicator` component
 *
 * @extends React.Component
 *
 * @property {boolean} animating - Determines whether component is animating. Default is `true`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `primary`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `tiny`, `small`, `medium`, `large`, or `giant`.
 * Default is `medium`.
 *
 * @overview-example SpinnerSimpleUsage
 *
 * @overview-example SpinnerSizes
 *
 * @overview-example SpinnerStatuses
 *
 * @example SpinnerDataLoading
 */
export class SpinnerComponent extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.animation = new SpinnerAnimation(this.containerSize.height);
        this.startAnimation = () => {
            this.animation.start();
        };
        this.stopAnimation = () => {
            this.animation.stop();
        };
        this.getComponentStyle = (source) => {
            const start = {
                container: source.container,
                arc: source.start,
            };
            const end = {
                container: source.container,
                arc: source.end,
                overflow: { top: this.containerSize.height / 2 },
            };
            return { start, end };
        };
        this.renderArcElement = (style, size) => {
            const arcSize = new Size(size.width, size.height / 2);
            return (<Animated.View style={[style.container, styles.absolute, size]}>
        <View style={[styles.noOverflow, style.overflow, arcSize]}>
          <Animated.View style={[style.arc, size]}>
            <View style={[styles.noOverflow, arcSize]}>
              <View style={[this.props.themedStyle, this.props.style]}/>
            </View>
          </Animated.View>
        </View>
      </Animated.View>);
        };
    }
    get containerSize() {
        const { width, height } = StyleSheet.flatten([this.props.themedStyle, this.props.style]);
        // @ts-ignore: width and height are restricted to be a number
        return new Size(width, height);
    }
    componentDidMount() {
        if (this.props.animating) {
            this.startAnimation();
        }
    }
    componentDidUpdate(prevProps) {
        const animatingChanged = this.props.animating !== prevProps.animating;
        if (animatingChanged && this.props.animating) {
            this.startAnimation();
        }
        if (animatingChanged && !this.props.animating) {
            this.stopAnimation();
        }
    }
    componentWillUnmount() {
        this.animation.release();
    }
    render() {
        const containerSize = this.containerSize;
        const { start, end } = this.getComponentStyle(this.animation.toProps());
        return (<View style={containerSize}>
        {this.renderArcElement(start, containerSize)}
        {this.renderArcElement(end, containerSize)}
      </View>);
    }
}
SpinnerComponent.styledComponentName = 'Spinner';
SpinnerComponent.defaultProps = {
    animating: true,
};
const styles = StyleSheet.create({
    absolute: StyleSheet.absoluteFillObject,
    noOverflow: {
        overflow: 'hidden',
    },
});
export const Spinner = styled(SpinnerComponent);
//# sourceMappingURL=spinner.component.js.map