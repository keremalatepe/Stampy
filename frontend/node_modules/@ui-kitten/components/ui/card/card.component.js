/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, View, TouchableOpacity, } from 'react-native';
import { styled, } from '../../theme';
import { Divider, } from '../divider/divider.component';
import { allWithPrefix } from '../support/services';
/**
 * Styled `Card` component is a basic content container component.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `filled` or `outline`.
 * Default is `outline`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {ReactNode} children - Determines text of the component.
 *
 * @property {() => ReactElement | ReactElement<CardHeaderProps>} header - Determines header of the component.
 *
 * @property {() => ReactElement} footer - Determines footer of the component.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example CardSimpleUsage
 *
 * @overview-example CardWithHeaderAndFooter
 *
 * @overview-example CardCustomHeader
 *
 * @overview-example CardStatuses
 */
class CardComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.getComponentStyle = (source) => {
            const { backgroundColor, borderRadius, borderWidth, borderColor, } = source;
            const headerStyles = allWithPrefix(source, 'header');
            const bodyStyles = allWithPrefix(source, 'body');
            const footerStyles = allWithPrefix(source, 'footer');
            const accentStyles = allWithPrefix(source, 'accent');
            const titleStyles = allWithPrefix(source, 'title');
            const descriptionStyles = allWithPrefix(source, 'description');
            return {
                container: {
                    backgroundColor: backgroundColor,
                    borderRadius: borderRadius,
                    borderWidth: borderWidth,
                    borderColor: borderColor,
                },
                header: {
                    paddingVertical: headerStyles.headerPaddingVertical,
                    paddingHorizontal: headerStyles.headerPaddingHorizontal,
                },
                body: {
                    paddingVertical: bodyStyles.bodyPaddingVertical,
                    paddingHorizontal: bodyStyles.bodyPaddingHorizontal,
                },
                footer: {
                    paddingVertical: footerStyles.footerPaddingVertical,
                    paddingHorizontal: footerStyles.footerPaddingHorizontal,
                },
                title: {
                    fontFamily: titleStyles.titleFontFamily,
                    fontSize: titleStyles.titleFontSize,
                    fontWeight: titleStyles.titleFontWeight,
                    lineHeight: titleStyles.titleLineHeight,
                    color: titleStyles.titleColor,
                    marginHorizontal: titleStyles.titleMarginHorizontal,
                },
                description: {
                    fontFamily: descriptionStyles.titleFontFamily,
                    fontSize: descriptionStyles.titleFontSize,
                    fontWeight: descriptionStyles.titleFontWeight,
                    lineHeight: descriptionStyles.titleLineHeight,
                    color: descriptionStyles.descriptionColor,
                    marginHorizontal: descriptionStyles.descriptionMarginHorizontal,
                },
                accent: {
                    backgroundColor: accentStyles.accentBackgroundColor,
                    height: accentStyles.accentHeight,
                },
            };
        };
        this.renderDivider = () => {
            return (<Divider />);
        };
        this.renderHeader = (headerStyles) => {
            const header = this.props.header();
            return React.cloneElement(header, {
                headerStyle: [styles.header, headerStyles.style, header.props.style],
                accentStyle: headerStyles.accent,
                titleStyle: headerStyles.title,
                descriptionStyle: headerStyles.description,
            });
        };
        this.renderFooter = (style) => {
            const footer = this.props.footer();
            return React.cloneElement(footer, {
                style: [style, styles.footer, footer.props.style],
            });
        };
        this.renderBody = (style) => {
            return (<View style={[styles.body, style]}>
        {this.props.children}
      </View>);
        };
        this.renderComponentChildren = (style) => {
            const { header, footer } = this.props;
            const headerStyles = {
                style: style.header,
                accent: style.accent,
                title: style.title,
                description: style.description,
            };
            return [
                header && this.renderHeader(headerStyles),
                this.renderBody(style.body),
                footer && this.renderFooter(style.footer),
            ];
        };
    }
    render() {
        const _a = this.props, { themedStyle, style, children } = _a, restProps = __rest(_a, ["themedStyle", "style", "children"]);
        const _b = this.getComponentStyle(themedStyle), { container } = _b, childrenStyles = __rest(_b, ["container"]);
        const [header, body, footer] = this.renderComponentChildren(childrenStyles);
        return (<TouchableOpacity activeOpacity={1.0} {...restProps} style={[container, styles.container, style]}>
        {header}
        {header && this.renderDivider()}
        {body}
        {footer && this.renderDivider()}
        {footer}
      </TouchableOpacity>);
    }
}
CardComponent.styledComponentName = 'Card';
const styles = StyleSheet.create({
    container: {
        overflow: 'hidden',
        justifyContent: 'space-between',
    },
    header: {
        backgroundColor: 'transparent',
    },
    body: {
        backgroundColor: 'transparent',
    },
    footer: {
        backgroundColor: 'transparent',
    },
});
export const Card = styled(CardComponent);
//# sourceMappingURL=card.component.js.map