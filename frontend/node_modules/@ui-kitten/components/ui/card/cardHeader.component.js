var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { View, } from 'react-native';
import { ListItem } from '../list/listItem.component';
/**
 * Styled `CardHeader` component can be used like `header` in the `Card` component.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the ListItem.
 *
 * @property {string} description - Determines the description of the ListItem's title.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {StyleProp<TextStyle>} descriptionStyle - Customizes description style.
 *
 * @property {StyleProp<ViewStyle>} accentStyle - Determines style of the stripe element.
 *
 * @property {StyleProp<ViewStyle>} headerStyle - Determines style of the header container element.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 */
export class CardHeader extends React.Component {
    render() {
        const _a = this.props, { accentStyle, style, headerStyle } = _a, restProps = __rest(_a, ["accentStyle", "style", "headerStyle"]);
        return (<React.Fragment>
        <View style={accentStyle}/>
        <ListItem style={[style, headerStyle]} {...restProps}/>
      </React.Fragment>);
    }
}
//# sourceMappingURL=cardHeader.component.js.map