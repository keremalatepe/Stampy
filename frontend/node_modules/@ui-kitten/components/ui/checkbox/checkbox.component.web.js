var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet } from 'react-native';
import { Interaction } from '../../theme';
import { CheckBox as RNCheckBox, } from './checkbox.component.tsx';
import { WebEventResponder, } from '../support/services';
export class CheckBox extends React.Component {
    constructor() {
        super(...arguments);
        this.checkboxRef = React.createRef();
        this.webEventResponder = WebEventResponder.create(this);
        this.onMouseEnter = () => {
            this.checkboxRef.current.props.dispatch([Interaction.HOVER]);
            if (this.props.onMouseEnter) {
                this.props.onMouseEnter();
            }
        };
        this.onMouseLeave = () => {
            this.checkboxRef.current.props.dispatch([]);
            if (this.props.onMouseLeave) {
                this.props.onMouseLeave();
            }
        };
        this.onFocus = () => {
            this.checkboxRef.current.props.dispatch([Interaction.FOCUSED]);
            if (this.props.onFocus) {
                this.props.onFocus();
            }
        };
        this.onBlur = () => {
            this.checkboxRef.current.props.dispatch([]);
            if (this.props.onBlur) {
                this.props.onBlur();
            }
        };
    }
    render() {
        const _a = this.props, { style } = _a, restProps = __rest(_a, ["style"]);
        return (<RNCheckBox {...restProps} {...this.webEventResponder.eventHandlers} ref={this.checkboxRef} style={[style, styles.element]}/>);
    }
}
const styles = StyleSheet.create({
    element: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
//# sourceMappingURL=checkbox.component.web.js.map