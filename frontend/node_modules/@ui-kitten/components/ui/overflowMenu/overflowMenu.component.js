/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet } from 'react-native';
import { styled, } from '../../theme';
import { Menu, } from '../menu/menu.component';
import { Popover, } from '../popover/popover.component';
/**
 * `OverflowMenu` renders vertical list of menu items in a modal.
 *
 * @extends React.Component
 *
 * @property {ReactElement} children - Determines the element above which the menu will be rendered.
 *
 * @property {boolean} visible - determines the visibility of the component.
 *
 * @property {OverflowMenuItemType[]} data - Determines menu items.
 *
 * @property {number} selectedIndex - Determines the index of currently selected item.
 *
 * @property {(index: number, event: GestureResponderEvent) => void} onSelect - Fires when selected item is changed.
 *
 * @property {Omit<PopoverProps, 'content'>} ...PopoverProps - Any props applied to Popover component,
 * excluding `content`.
 *
 * @property {Override<MenuProps, { data: OverflowMenuItemType[] }>} ...MenuProps - Any props applied to Menu component.
 *
 * @property {ModalPresentingBased} ...ModalProps - Any props applied to Modal component.
 *
 * @overview-example OverflowMenuSimpleUsage
 *
 * @overview-example OverflowMenuPlacement
 *
 * @overview-example OverflowMenuWithIcons
 *
 * @overview-example OverflowMenuWithDisabledItems
 *
 * @example OverflowMenuWithoutDivider
 *
 * @example OverflowMenuExternalSourceIcons
 */
class OverflowMenuComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.getComponentStyle = (source) => {
            const { indicatorBackgroundColor } = source, containerParameters = __rest(source, ["indicatorBackgroundColor"]);
            return {
                container: containerParameters,
                indicator: {
                    backgroundColor: indicatorBackgroundColor,
                },
            };
        };
        this.renderPopoverContentElement = (style) => {
            const _a = this.props, { themedStyle, indicatorStyle, children, data } = _a, restProps = __rest(_a, ["themedStyle", "indicatorStyle", "children", "data"]);
            return (<Menu {...restProps} data={data} style={[styles.menu, style]} initialNumToRender={data.length} bounces={false}/>);
        };
    }
    render() {
        const _a = this.props, { themedStyle, style, indicatorStyle, children, appearance } = _a, restProps = __rest(_a, ["themedStyle", "style", "indicatorStyle", "children", "appearance"]);
        const { container, indicator } = this.getComponentStyle(themedStyle);
        const contentElement = this.renderPopoverContentElement(container);
        return (<Popover {...restProps} style={[styles.container, style]} indicatorStyle={[indicator, indicatorStyle]} content={contentElement}>
        {children}
      </Popover>);
    }
}
OverflowMenuComponent.styledComponentName = 'OverflowMenu';
OverflowMenuComponent.defaultProps = {
    indicatorOffset: 12,
};
const styles = StyleSheet.create({
    container: {
        overflow: 'hidden',
    },
    menu: {
        flexGrow: 0,
    },
});
export const OverflowMenu = styled(OverflowMenuComponent);
//# sourceMappingURL=overflowMenu.component.js.map