/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { GestureResponderEvent, StyleProp, TextInputProps, TextStyle, ViewProps } from 'react-native';
import { StyledComponentProps, StyleType } from '../../theme';
import { IconElement } from '../icon/icon.component';
declare type IconProp = (style: StyleType) => IconElement;
interface ComponentProps {
    status?: string;
    size?: string;
    disabled?: boolean;
    label?: string;
    caption?: string;
    captionIcon?: IconProp;
    icon?: IconProp;
    textStyle?: StyleProp<TextStyle>;
    labelStyle?: StyleProp<TextStyle>;
    captionTextStyle?: StyleProp<TextStyle>;
    onIconPress?: (event: GestureResponderEvent) => void;
}
export declare type InputProps = StyledComponentProps & TextInputProps & ComponentProps;
export declare type InputElement = React.ReactElement<InputProps>;
/**
 * Styled `Input` component.
 *
 * @extends React.Component
 *
 * @method {() => void} focus - Requests focus for the given input or view. The exact behavior triggered
 * will depend on the platform and type of view.
 *
 * @method {() => void} blur - Removes focus from an input or view. This is the opposite of `focus()`.
 *
 * @method {() => boolean} isFocused - Returns if the input is currently focused.
 *
 * @method {() => void} clear - Removes all text from the input.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `small`, `medium` or `large`.
 * Default is `medium`.
 *
 * @property {string} label - Determines label of the component.
 *
 * @property {StyleProp<TextStyle>} labelStyle - Customizes label style.
 *
 * @property {string} caption - Determines caption of the component.
 *
 * @property {StyleProp<TextStyle>} captionStyle - Customizes caption style.
 *
 * @property {string} placeholder - Determines placeholder of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(style: StyleType) => ReactElement} icon - Determines icon of the component.
 *
 * @property {(style: StyleType) => ReactElement} captionIcon - Determines caption icon.
 *
 * @property {TextInputProps} ...TextInputProps - Any props applied to TextInput component.
 *
 * @overview-example InputSimpleUsage
 *
 * @overview-example InputStates
 *
 * @overview-example InputStatus
 *
 * @overview-example InputSize
 *
 * @overview-example InputWithIcon
 *
 * @overview-example InputWithLabel
 *
 * @overview-example InputWithCaption
 *
 * @example InputInlineStyling
 *
 * @example InputWithExternalSourceIcon
 */
export declare class InputComponent extends React.Component<InputProps> {
    static styledComponentName: string;
    private textInputRef;
    focus: () => void;
    blur: () => void;
    isFocused: () => boolean;
    clear: () => void;
    private onTextFieldFocus;
    private onTextFieldBlur;
    private onIconPress;
    private getComponentStyle;
    private renderIconTouchableElement;
    private renderIconElement;
    private renderLabelElement;
    private renderCaptionElement;
    private renderCaptionIconElement;
    private renderComponentChildren;
    render(): React.ReactElement<ViewProps>;
}
export declare const Input: import("../../theme").StyledComponentClass<InputProps>;
export {};
